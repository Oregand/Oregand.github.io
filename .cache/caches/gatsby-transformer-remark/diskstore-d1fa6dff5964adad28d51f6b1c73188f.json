{
  "expireTime": 9007200803803889000,
  "key": "transformer-remark-markdown-html-3791258174fda8aa07a3ae7b27ff4fbf-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-",
  "val": "<p>So, at some point in your career as a software developer, you’re going to run into a moment of: <code class=\"language-text\">Shit, deploy or keep tweaking?</code>. Don’t panic, it’s a normal reaction and a cross roads we all hit eventually. </p>\n<p>It encourages readable, correct and performant code, and helps developers fall into <a href=\"https://blog.codinghorror.com/falling-into-the-pit-of-success/\">the pit of success</a>.</p>\n<p>I call these design aspects “first order” because they are the first things a library developer tends to focus on. You might have to compromise on some of them and make tradeoffs but at least they’re always on your mind.</p>\n<p>However, unless you’re sending a rover to Mars, your code will probably change over time. And so will the code of your API consumers.</p>\n<p>The best API designers I know don’t stop at the “first order” aspects like readability. They dedicate just as much, if not more, effort to what I call the “second order” API design: <strong>how code using this API would evolve over time.</strong></p>\n<p>A slight change in requirements can make the most elegant code fall apart.</p>\n<p><em>Great</em> APIs anticipate that. They anticipate that you’ll want to move some code. Copy and paste some part. Rename it. Unify special cases into a generic reusable helper. Unwind an abstraction back into specific cases. Add a hack. Optimize a bottleneck. Throw away a part and start it anew. Make a mistake. Navigate between the cause and the effect. Fix a bug. Review the fix.</p>\n<p>Great APIs not only let you fall into a pit of success, but help you <em>stay</em> there.</p>\n<p>They’re optimized for change.</p>"
}
