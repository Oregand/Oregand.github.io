{
  "data": {
    "site": {
      "siteMetadata": { "title": "Get. Shit. Done.", "author": "David O'Regan" }
    },
    "markdownRemark": {
      "id": "6fe008a6-a3e8-5a94-836f-a2897719a0fe",
      "excerpt": "Human beings work on the basis of low complexity but high risk situations. This is our natural state as dictated by nature. Software by oppoisition is highâ€¦",
      "html": "<blockquote>\n<p>Human beings work on the basis of low complexity but high risk situations. This is our natural state as dictated by nature. Software by oppoisition is high complextiy but low risk.</p>\n</blockquote>\n<p>Over my career of 10 years as a software developer Ive noticed a trend with those that I consider to be successful and ive often been told that success leaves clues. The trend in question was a air of fearlessness when it came to failure, and failure in terms of deploying software specifically.</p>\n<p>Though, what does failing forward look like? I mean, can it be done in a productive sense so you don't frustrate your co-workers? Saying to someone, \"Hey, failing forward is the key\" is all fine and dandy, but what happens when you <em>fail forward</em> and shit can production?  </p>\n<p>The truth is, failing forward is an exceptionally difficult paradigm to follow because its basically frowned upon for business value. Up time counts, user satisfaction counts, <strong>quality</strong> counts. Over time, the pattern of failing forward may have become apparent to me, but a dark pattern also came with it; pretending you don't. No one wants to admit they fail forward, it shakes confidence. </p>\n<p>So, if failing forward is at such odds(useful but dangerous), how can we implement it as a viable delivery model?</p>\n<p>The answer is <em>timing</em>.</p>\n<p>Timing is everything when you want to continue delivering progress to any application. You need to time you releases in line with <em>who</em> its going to affect. This can be done effective with a mind map of the associated expense of the release in terms of possible burden generated.</p>\n<blockquote>\n<p>Does this affect all devs - Very expensive\nClients - Could be so expensive it costs the whole company\nFrontend devs that are progressive - Not that big of a deal</p>\n</blockquote>\n<p>And so, you realize that failing forward is playing a dangerous game with a production application as you have the potential to cripple things in one move but in order to make progress, you need to push these fears aside and get better at your release timing. </p>\n<h3>Protip</h3>\n<p>A lot of the associated risk of failing forward can be done away with via a reactive team. If you and your team are extremely capable at reacting to issues on the fly, you can safely absorb any generated cost from a well timed release. </p>\n<p>My thoughts are echoed by one of my developer heros:</p>\n<p><a href=\"https://www.youtube.com/watch?v=mchoEOXGskU&#x26;t\">FunFunFunction</a></p>",
      "timeToRead": 2,
      "frontmatter": { "title": "Failing Forward", "date": "February 26, 2019" }
    }
  },
  "pageContext": {
    "slug": "/failing-forward/",
    "previous": {
      "fields": { "slug": "/vuejsamsterdam-2019-the-best-bits/" },
      "frontmatter": { "title": "VueJS Amsterdam 2019 - The Best Bits" }
    },
    "next": {
      "fields": { "slug": "/vue-vs-react/" },
      "frontmatter": { "title": "" }
    }
  }
}
