{
  "data": {
    "site": {
      "siteMetadata": { "title": "Get. Shit. Done.", "author": "David O'Regan" }
    },
    "markdownRemark": {
      "id": "37cb5327-517d-5d6a-8875-d210f3a80479",
      "excerpt": "How do we depreciate code in a safe way for a user while still allowing a developer room for improvement? It is, a tough question. Lets say for instance, we…",
      "html": "<p><em>How do we depreciate code in a safe way for a user while still allowing a developer room for improvement?</em></p>\n<p>It is, a tough question.</p>\n<p>Lets say for instance, we have a application which maintains a dependency to a external toolbox. This external tool box uses strict semantic versions to help keep some measure of santiy.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@namelessorganization/core\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@namelessorganization/toolbox\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5.9.5\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our toolbox represents a collection of components, each of which maintain a workable API contract with the core application. Each component lives under this version and different components are leveraged all over our core application like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Button <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@namelessorganization/toolbox'</span></code></pre></div>\n<p>Now, lets say we have a set of defined forms in a handful of locations which re-use the same component set.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  Button<span class=\"token punctuation\">,</span>\n  Form<span class=\"token punctuation\">,</span>\n  FormGroup<span class=\"token punctuation\">,</span>\n  Label<span class=\"token punctuation\">,</span>\n  CheckBox\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@namelessorganization/toolbox'</span>\n<span class=\"token punctuation\">;</span><span class=\"token operator\">&lt;</span>Form<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>FormGroup<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Label<span class=\"token operator\">></span>Form <span class=\"token number\">1</span> Input<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Label<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Checkbox <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FormGroup<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Button color<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'primary'</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Submit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Form<span class=\"token operator\">></span></code></pre></div>\n<p>Our component set is used in a handful of locations which creates a established, understood and hopefully predicable API contract between <code class=\"language-text\">toolbox</code> and <code class=\"language-text\">core</code>. Such that, our <code class=\"language-text\">&lt;Form&gt;</code> can be developed in confidence as the functionality of our component set is expected.</p>\n<p>But, what happens when we need to depreciate a current component in lue of a better implementation?</p>\n<p>The benefits of our previously contract between <code class=\"language-text\">toolbox</code> and <code class=\"language-text\">core</code> now become a burden. To illustrate why this contract has now become a burden, lets look at what I consider the best migration path.</p>\n<h2>Depreciating / Maintaining Multiple Versions</h2>\n<p>This is probably the most widely assumed and used strategy for a depreciation of “generic” components. In our <code class=\"language-text\">toolbox</code> we now create a second version of our component in question and begin to replace the instances in <code class=\"language-text\">core</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// toolbox</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ButtonOld\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ButtonNew</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// core</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ButtonOld<span class=\"token punctuation\">,</span> ButonNew <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@namelessorganization/toolbox'</span>\n\n\n<span class=\"token comment\">// Comp A</span>\n\n<span class=\"token operator\">&lt;</span>ButtonOld <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\">// Comp B</span>\n\n<span class=\"token operator\">&lt;</span>ButtonNew <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>Over time, <code class=\"language-text\">&lt;ButtonOld /&gt;</code> will be removed from our <code class=\"language-text\">core</code> application to ensure a graceful migration from the old depreciated code base without shattering the current application.</p>\n<h3>Pros</h3>\n<ul>\n<li>Easy to implement a non-breaking migration</li>\n<li>Easy to track versions and ensure proper refractoring</li>\n<li>Depreciated components can be planned for full removal during a major release</li>\n</ul>\n<h3>Cons</h3>\n<ul>\n<li>Must be mindful to keep a very strict rules for amount of components available</li>\n<li>Harder to keep track of changes as they are in multiple files</li>\n<li>Doucmentation is harder</li>\n</ul>\n<h2><code class=\"language-text\">next</code></h2>\n<p>Given we have a open migration path with the above pattern, we can make use of a experimental branch <code class=\"language-text\">next</code> as a place for our major breaking changes to be published and tested.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@namelessorganization/core\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@namelessorganization/toolbox\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This allows developers to test, push and pull code from the bleeding edge in a fearless way.</p>\n<p>Our <code class=\"language-text\">toolbox</code> can benifit from aggresive pushing of imporvement, while <code class=\"language-text\">core</code> can remain functionally safe for our end users.</p>\n<p>The most important aspect of this style of development is promoting a sense of <em>failing forward</em>. Which for a sucessful project is one of the most overlooked aspects of sucess.</p>\n<p>As mark Z said; “Move fast, break shit, fix it”.</p>\n<h3>Caveeat</h3>\n<p>For this migration strategy to work, there must be a <em>strict</em> deployment process in agreement between the developers, QA and ops team.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Major<span class=\"token punctuation\">:</span> <span class=\"token operator\">>>></span> Every <span class=\"token number\">6</span> months <span class=\"token keyword\">for</span> a <span class=\"token keyword\">break</span>\n\nMinor<span class=\"token punctuation\">:</span> <span class=\"token operator\">>>></span> Every week <span class=\"token keyword\">with</span> no breaks\n\nPatch<span class=\"token punctuation\">:</span> <span class=\"token operator\">>>></span> Night release <span class=\"token template-string\"><span class=\"token string\">`next`</span></span></code></pre></div>\n<p>Users need to keep faith in an applications resiliance, and so during major breaks, companies need to work harder in terms of timing and response to ensure users dont suffer.</p>",
      "timeToRead": 3,
      "frontmatter": {
        "title": "Graceful Depreciation",
        "date": "February 12, 2019"
      }
    }
  },
  "pageContext": {
    "slug": "/graceful-depreciation/",
    "previous": {
      "fields": { "slug": "/being-ok-with-shitty-code/" },
      "frontmatter": { "title": "Being Ok With Deploying Shitty Code" }
    },
    "next": {
      "fields": { "slug": "/ambition/" },
      "frontmatter": { "title": "Ambition" }
    }
  }
}
